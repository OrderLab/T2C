/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.PrivateCellUtil;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.Tag;
import org.apache.hadoop.hbase.TagType;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.ColumnFamilyDescriptor;
import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.Increment;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.RegionInfo;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.client.TableDescriptor;
import org.apache.hadoop.hbase.client.TableDescriptorBuilder;
import org.apache.hadoop.hbase.regionserver.CompactingMemStore;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.security.UserGroupInformation;

public class App {

    String COLUMN_FAMILY = "MyCF";
    byte[] COLUMN_FAMILY_BYTES = Bytes.toBytes(COLUMN_FAMILY);

    String defaultHost = "lift11";
    String user = "vqx2dc";
    String homeDir = "/localtmp/detection/hadoop/hadoop-dist/target/hadoop-3.1.2";

    public static void main(String[] args) throws NumberFormatException, IOException {
        if (args.length != 1) {
            System.exit(1);
        }
        App app = new App();
        app.start(Integer.parseInt(args[0]));
    }

    public void start(Integer bug) throws IOException {
        System.out.println("Bug " + bug);
        if (bug == 21041) {
            run21041();
        } else if (bug == 21621) {
            run21621();
        } else if (bug == 25827) {
            run25827();
        }
    }

    public void run21041() throws IOException {
        Configuration CONF = HBaseConfiguration.create();
        Connection conn;

        Table table;
        TableName tName = TableName.valueOf("usertable");
        String defaultHost = "lift11";

        CONF.set(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY, String.valueOf(0.09));
        CONF.set("hbase.rootdir", "hdfs://" + defaultHost + ":8020/hbase");
        CONF.set("hbase.zookeeper.quorum", defaultHost);
        UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(user));
        System.setProperty("HADOOP_USER_NAME", user);
        System.setProperty("hadoop.home.dir", homeDir);
        conn = ConnectionFactory.createConnection(CONF);

        try {
            HBaseAdmin.available(CONF);
        } catch (IOException e) {
            System.out.println("HBase is not running." + e.getMessage());
            throw e;
        }

        Admin admin = conn.getAdmin();

        if (admin.tableExists(tName)) {
            admin.deleteTable(tName);
            ColumnFamilyDescriptor colDesc = ColumnFamilyDescriptorBuilder.newBuilder(COLUMN_FAMILY_BYTES).build();
            TableDescriptor tableDesc = TableDescriptorBuilder.newBuilder(tName).setColumnFamily(colDesc).build();
            admin.createTable(tableDesc);
        }
        table = conn.getTable(tName);

        byte[] family = Bytes.toBytes("family");
        for (byte[] row : new byte[(int) Math.pow('z' - 'a' + 1, 3)][3]) {
            Put put = new Put(row);
            put.addColumn(family, family, row);
            table.put(put);
        }
        for (RegionInfo region : admin.getRegions(tName)) {
            admin.flushRegion(region.getRegionName());
        }
    }

    public void run21621() throws IOException {
        Configuration CONF = HBaseConfiguration.create();
        Connection conn;

        Table table;
        TableName tName = TableName.valueOf("usertable");
        String defaultHost = "lift11";

        final int DEFAULT_BLOCK_SIZE = 1024 * 1024;
        CONF.setLong("dfs.blocksize", DEFAULT_BLOCK_SIZE);
        CONF.setInt("dfs.replication", 1);
        CONF.setLong("hbase.hregion.max.filesize", 322122547200L);
        CONF.set("hbase.rootdir", "hdfs://" + defaultHost + ":8020/hbase");
        CONF.set("hbase.zookeeper.quorum", defaultHost);

        UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(user));
        System.setProperty("HADOOP_USER_NAME", user);
        System.setProperty("hadoop.home.dir", homeDir);
        conn = ConnectionFactory.createConnection(CONF);

        try {
            HBaseAdmin.available(CONF);
        } catch (IOException e) {
            System.out.println("HBase is not running." + e.getMessage());
            throw e;
        }

        Admin admin = conn.getAdmin();

        if (admin.tableExists(tName)) {
            admin.deleteTable(tName);
            ColumnFamilyDescriptor colDesc = ColumnFamilyDescriptorBuilder.newBuilder(COLUMN_FAMILY_BYTES).build();
            TableDescriptor tableDesc = TableDescriptorBuilder.newBuilder(tName).setColumnFamily(colDesc).build();
            admin.createTable(tableDesc);
        }
        table = conn.getTable(tName);

        byte[] family = Bytes.toBytes("family");
        int BATCH_SIZE = 10;
        int ROWS_TO_INSERT = 100;
        int valueWidth = 128 * 1024;
        byte[] LARGE_VALUE = new byte[valueWidth];
        byte[] col_name = Bytes.toBytes("a");
        List<Put> putList = new ArrayList<Put>();
        for (long i = 0; i < ROWS_TO_INSERT; i++) {
            Put put = new Put(Bytes.toBytes(i));
            put.addColumn(family, col_name, LARGE_VALUE);
            putList.add(put);
            if (putList.size() >= BATCH_SIZE) {
                table.put(putList);
                admin.flush(tName);
                putList.clear();
            }
        }

        if (!putList.isEmpty()) {
            table.put(putList);
            admin.flush(tName);
            putList.clear();
        }

        Scan scan = new Scan();
        scan.setReversed(true);
        int count = 0;

        try (ResultScanner results = table.getScanner(scan)) {
            for (Result result : results) {
                count++;
            }
        }
        assert (count == ROWS_TO_INSERT);
    }

    public void run25827() throws IOException {
        Configuration CONF = HBaseConfiguration.create();
        Connection conn;

        Table table;
        TableName tName = TableName.valueOf("usertable");

        byte[] FAMILY = Bytes.toBytes("testFamily");
        byte[] ROW = Bytes.toBytes("testRow");
        byte[] COLUMN = Bytes.toBytes("column");

        CONF.set("hbase.rootdir", "hdfs://" + defaultHost + ":8020/hbase");
        CONF.set("hbase.zookeeper.quorum", defaultHost);

        UserGroupInformation.setLoginUser(UserGroupInformation.createRemoteUser(user));
        System.setProperty("HADOOP_USER_NAME", user);
        System.setProperty("hadoop.home.dir", homeDir);
        conn = ConnectionFactory.createConnection(CONF);

        try {
            HBaseAdmin.available(CONF);
        } catch (IOException e) {
            System.out.println("HBase is not running." + e.getMessage());
            throw e;
        }

        Admin admin = conn.getAdmin();

        if (admin.tableExists(tName)) {
            admin.deleteTable(tName);
            ColumnFamilyDescriptor colDesc = ColumnFamilyDescriptorBuilder.newBuilder(COLUMN_FAMILY_BYTES).build();
            TableDescriptor tableDesc = TableDescriptorBuilder.newBuilder(tName).setColumnFamily(colDesc).build();
            admin.createTable(tableDesc);
        }
        table = conn.getTable(tName);

        for (int i = 0; i < 10; i++) {
            Increment inc = new Increment(ROW);
            inc.addColumn(FAMILY, COLUMN, 1);
            long ttl = i + 3600000;
            inc.setTTL(ttl);
            table.increment(inc);

            Scan scan = new Scan().withStartRow(ROW);
            ResultScanner scanner = table.getScanner(scan);
            int count = 0;
            Result result;
            while ((result = scanner.next()) != null) {
                Cell[] cells = result.rawCells();
                for (Cell cell : cells) {
                    List<Tag> tags = PrivateCellUtil.getTags(cell);
                    // Make sure there is only 1 tag.
                    assert (tags.size() == 1);
                    Tag tag = tags.get(0);
                    assert (tag.getType() == TagType.TTL_TAG_TYPE);
                    long ttlTagValue = Bytes.toLong(tag.getValueArray(), tag.getValueOffset());
                    assert (ttlTagValue == ttl);
                }
                count++;
            }
            // Make sure there is only 1 result.
            assert (count == 1);
        }
    }
}
