package edu.jhu.order.t2c.dynamicd.runtime;


import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.JavaFileObject;

@SupportedAnnotationTypes("edu.jhu.order.t2c.dynamicd.runtime.MarkedOp")
@SupportedSourceVersion(SourceVersion.RELEASE_8)
public class OperationProcessor extends AbstractProcessor {

    public static final String OpTypeSysImplName = "edu.jhu.order.t2c.dynamicd.runtime.OpTypeSysImpl";

    class AnnotatedOp
    {
        String opName = "";
        boolean ifQueryOp= false;

        public AnnotatedOp(String opName, boolean ifQueryOp) {
            this.opName = opName;
            this.ifQueryOp = ifQueryOp;
        }
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations,
            RoundEnvironment roundEnv) {

        Set<AnnotatedOp> ops = new HashSet<>();
        for (TypeElement annotation : annotations) {
            Set<? extends Element> annotatedElements
                    = roundEnv.getElementsAnnotatedWith(annotation);

            for (Element e: annotatedElements)
            {
                ops.add(new AnnotatedOp(e.getSimpleName().toString(),e.getAnnotation(MarkedOp.class).ifQueryOp()));
                System.out.println("Add customized operation: "+e.getSimpleName());
            }
        }

        try {
            writeOpTypeFile(OpTypeSysImplName, ops);
        }catch (IOException ex)
        {
            ex.printStackTrace();
        }

        return true;
    }

    private void writeOpTypeFile(
            String className, Set<AnnotatedOp> ops)
            throws IOException {

        String packageName = null;
        int lastDot = className.lastIndexOf('.');
        if (lastDot > 0) {
            packageName = className.substring(0, lastDot);
        }

        String simpleClassName = className.substring(lastDot + 1);

        JavaFileObject builderFile = processingEnv.getFiler()
                .createSourceFile(className);

        try (PrintWriter out = new PrintWriter(builderFile.openWriter())) {

            if (packageName != null) {
                out.print("package ");
                out.print(packageName);
                out.println(";");
                out.println();
            }

            out.println("//this file is automatically generated");
            out.print("public enum ");
            out.print(simpleClassName);
            out.println(" implements edu.jhu.order.t2c.dynamicd.runtime.Operation.OpType {");
            out.println();

            for(AnnotatedOp op: ops)
            {
                String opName = op.opName;
                boolean ifQueryOp = op.ifQueryOp;
                out.print("    "+opName+"(\""+opName+"\", "+ifQueryOp+"),");
                out.println();
            }
            out.print("    ILLEGAL(\"ILLEGAL\", false);");
            out.println();

            String s = String.join("\n\t"
                    , "\t"
                , "final String text;"
                , "final boolean ifQueryOp;"
                , simpleClassName+"(final String text, final boolean ifQueryOp) {"
                , "    this.text = text;"
                , "    this.ifQueryOp = ifQueryOp;"
                , "}"
                , ""
                , "@Override"
                , "public String toString() {"
                , "    return text;"
                , "}"
                , ""
                , "public boolean ifQueryOp()"
                , "{"
                , "    return ifQueryOp;"
                , "}"
            );

            out.println(s);
            out.println("}");
        }
    }
}

