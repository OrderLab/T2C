diff --git a/bin/zkEnv.sh b/bin/zkEnv.sh
index 8d93a50c7..3f970e1f9 100755
--- a/bin/zkEnv.sh
+++ b/bin/zkEnv.sh
@@ -127,6 +127,9 @@ CLASSPATH="$ZOOBINDIR/../build/classes:$CLASSPATH"
 #make it work for developers
 CLASSPATH="$ZOOBINDIR/../zookeeper-server/target/classes:$CLASSPATH"
 
+#CHANG: load testing classes at runtime
+CLASSPATH="$ZOOBINDIR/../zookeeper-server/target/test-classes:$CLASSPATH"
+
 case "`uname`" in
     CYGWIN*|MINGW*) cygwin=true ;;
     *) cygwin=false ;;
diff --git a/bin/zkServer.sh b/bin/zkServer.sh
index 4780118ab..f027ea717 100755
--- a/bin/zkServer.sh
+++ b/bin/zkServer.sh
@@ -33,6 +33,7 @@ else
   . "$ZOOBINDIR"/zkEnv.sh
 fi
 
+JMXDISABLE="true"
 # See the following page for extensive details on setting
 # up the JVM to accept JMX remote management:
 # http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html
@@ -155,10 +156,11 @@ start)
          exit 1
       fi
     fi
+    T2CFLAGS="-Dt2c.mode=prod -Dconf=CONF_PATH_MACRO -Dt2c.t2c_root_abs_path=T2C_DIR_MACRO -Dt2c.target_system_abs_path=SYS_DIR_MACRO"
     nohup "$JAVA" $ZOO_DATADIR_AUTOCREATE "-Dzookeeper.log.dir=${ZOO_LOG_DIR}" \
     "-Dzookeeper.log.file=${ZOO_LOG_FILE}" "-Dzookeeper.root.logger=${ZOO_LOG4J_PROP}" \
     -XX:+HeapDumpOnOutOfMemoryError -XX:OnOutOfMemoryError='kill -9 %p' \
-    -cp "$CLASSPATH" $JVMFLAGS $ZOOMAIN "$ZOOCFG" > "$_ZOO_DAEMON_OUT" 2>&1 < /dev/null &
+    -cp "$CLASSPATH" $JVMFLAGS $T2CFLAGS edu.jhu.order.t2c.dynamicd.runtime.MainWrapper $ZOOMAIN "$ZOOCFG" > "$_ZOO_DAEMON_OUT" 2>&1 < /dev/null &
     if [ $? -eq 0 ]
     then
       case "$OSTYPE" in
diff --git a/zookeeper-server/pom.xml b/zookeeper-server/pom.xml
index d69e7c63d..780ac49bc 100755
--- a/zookeeper-server/pom.xml
+++ b/zookeeper-server/pom.xml
@@ -162,6 +162,13 @@
       <artifactId>snappy-java</artifactId>
       <scope>provided</scope>
     </dependency>
+    <dependency>
+      <groupId>edu.jhu.order.t2c</groupId>
+      <artifactId>t2c</artifactId>
+      <version>1.0</version>
+      <scope>system</scope>
+      <systemPath>T2C_DIR_MACRO/target/t2c-1.0-SNAPSHOT-jar-with-dependencies.jar</systemPath>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java b/zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java
index a12e5803c..f7a96054d 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java
@@ -24,6 +24,7 @@
 import org.apache.yetus.audience.InterfaceAudience;
 import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Id;
+import edu.jhu.order.t2c.dynamicd.runtime.MarkedOp;
 
 @InterfaceAudience.Public
 public class ZooDefs {
@@ -35,67 +36,67 @@ public class ZooDefs {
     @InterfaceAudience.Public
     public interface OpCode {
 
-        int notification = 0;
+        @MarkedOp int notification = 0;
 
-        int create = 1;
+        @MarkedOp int create = 1;
 
-        int delete = 2;
+        @MarkedOp int delete = 2;
 
-        int exists = 3;
+        @MarkedOp int exists = 3;
 
-        int getData = 4;
+        @MarkedOp int getData = 4;
 
-        int setData = 5;
+        @MarkedOp int setData = 5;
 
-        int getACL = 6;
+        @MarkedOp int getACL = 6;
 
-        int setACL = 7;
+        @MarkedOp int setACL = 7;
 
-        int getChildren = 8;
+        @MarkedOp int getChildren = 8;
 
-        int sync = 9;
+        @MarkedOp int sync = 9;
 
-        int ping = 11;
+        @MarkedOp int ping = 11;
 
-        int getChildren2 = 12;
+        @MarkedOp int getChildren2 = 12;
 
-        int check = 13;
+        @MarkedOp int check = 13;
 
-        int multi = 14;
+        @MarkedOp int multi = 14;
 
-        int create2 = 15;
+        @MarkedOp int create2 = 15;
 
-        int reconfig = 16;
+        @MarkedOp int reconfig = 16;
 
-        int checkWatches = 17;
+        @MarkedOp int checkWatches = 17;
 
-        int removeWatches = 18;
+        @MarkedOp int removeWatches = 18;
 
-        int createContainer = 19;
+        @MarkedOp int createContainer = 19;
 
-        int deleteContainer = 20;
+        @MarkedOp int deleteContainer = 20;
 
-        int createTTL = 21;
+        @MarkedOp int createTTL = 21;
 
-        int multiRead = 22;
+        @MarkedOp int multiRead = 22;
 
-        int auth = 100;
+        @MarkedOp int auth = 100;
 
-        int setWatches = 101;
+        @MarkedOp int setWatches = 101;
 
-        int sasl = 102;
+        @MarkedOp int sasl = 102;
 
-        int getEphemerals = 103;
+        @MarkedOp int getEphemerals = 103;
 
-        int getAllChildrenNumber = 104;
+        @MarkedOp int getAllChildrenNumber = 104;
 
-        int setWatches2 = 105;
+        @MarkedOp int setWatches2 = 105;
 
-        int addWatch = 106;
+        @MarkedOp int addWatch = 106;
 
-        int createSession = -10;
+        @MarkedOp int createSession = -10;
 
-        int closeSession = -11;
+        @MarkedOp int closeSession = -11;
 
         int error = -1;
 
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
index 9ffde55c1..164a91f72 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java
@@ -18,6 +18,7 @@
 
 package org.apache.zookeeper.server;
 
+import edu.jhu.order.t2c.dynamicd.runtime.MarkedOpFunc;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -106,6 +107,21 @@ public FinalRequestProcessor(ZooKeeperServer zks) {
         this.requestPathMetricsCollector = zks.getRequestPathMetricsCollector();
     }
 
+    @MarkedOpFunc("exists")
+    Record existsRequest(Request request, ServerCnxn cnxn) throws IOException, KeeperException {
+        // TODO we need to figure out the security requirement for this!
+        ExistsRequest existsRequest = new ExistsRequest();
+        ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);
+        String path = existsRequest.getPath();
+        if (path.indexOf('\0') != -1) {
+            throw new KeeperException.BadArgumentsException();
+        }
+        Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);
+        Record rsp = new ExistsResponse(stat);
+        requestPathMetricsCollector.registerRequest(request.type, path);
+        return rsp;
+    }
+
     public void processRequest(Request request) {
         LOG.debug("Processing request:: {}", request);
 
@@ -348,16 +364,7 @@ public void processRequest(Request request) {
             }
             case OpCode.exists: {
                 lastOp = "EXIS";
-                // TODO we need to figure out the security requirement for this!
-                ExistsRequest existsRequest = new ExistsRequest();
-                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);
-                path = existsRequest.getPath();
-                if (path.indexOf('\0') != -1) {
-                    throw new KeeperException.BadArgumentsException();
-                }
-                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);
-                rsp = new ExistsResponse(stat);
-                requestPathMetricsCollector.registerRequest(request.type, path);
+                rsp = existsRequest(request, cnxn);
                 break;
             }
             case OpCode.getData: {
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
index d0fb7da4d..9e1196950 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java
@@ -18,6 +18,7 @@

 package org.apache.zookeeper.server;

+import edu.jhu.order.t2c.dynamicd.runtime.MarkedOpSubfields;
 import java.nio.ByteBuffer;
 import java.util.List;
 import org.apache.jute.Record;
@@ -70,10 +71,13 @@ public Request(long sessionId, int xid, int type, TxnHeader hdr, Record txn, lon
         this.authInfo = null;
     }

+    @MarkedOpSubfields
     public final long sessionId;

+    @MarkedOpSubfields
     public final int cxid;

+    @MarkedOpSubfields
     public final int type;

     public final ByteBuffer request;
@@ -84,6 +88,7 @@ public Request(long sessionId, int xid, int type, TxnHeader hdr, Record txn, lon

     private Record txn;

+    @MarkedOpSubfields
     public long zxid = -1;

     public final List<Id> authInfo;
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
index ef13d7470..852aeb40f 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
@@ -63,6 +63,9 @@
 public class QuorumPeerConfig {

     private static final Logger LOG = LoggerFactory.getLogger(QuorumPeerConfig.class);
+
+    public static QuorumPeerConfig sharedConfig = null;
+
     private static final int UNSET_SERVERID = -1;
     public static final String nextDynamicConfigFileSuffix = ".dynamic.next";

@@ -171,6 +174,9 @@ public ConfigException(String msg, Exception e) {
      * @throws ConfigException error processing configuration
      */
     public void parse(String path) throws ConfigException {
+        // CHANG: saved this config instance
+        sharedConfig = this;
+
         LOG.info("Reading configuration from: " + path);

         try {
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java
index 43cc5b001..c0be728b8 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java
@@ -64,7 +64,7 @@ public class ClientTest extends ClientBase {
     private boolean skipACL = System.getProperty("zookeeper.skipACL", "no").equals("yes");

     /** Verify that pings are sent, keeping the "idle" client alive */
-    @Test
+    // @Test
     public void testPing() throws Exception {
         ZooKeeper zkIdle = null;
         ZooKeeper zkWatchCreator = null;
@@ -96,18 +96,18 @@ public void testPing() throws Exception {
         }
     }

-    @Test
+    // @Test
     public void testClientwithoutWatcherObj() throws IOException, InterruptedException, KeeperException {
         performClientTest(false);
     }

-    @Test
+    // @Test
     public void testClientWithWatcherObj() throws IOException, InterruptedException, KeeperException {
         performClientTest(true);
     }

     /** Exercise the testable functions, verify tostring, etc... */
-    @Test
+    // @Test
     public void testTestability() throws Exception {
         TestableZooKeeper zk = createClient();
         try {
@@ -122,7 +122,7 @@ public void testTestability() throws Exception {
         }
     }

-    @Test
+    // @Test
     public void testACLs() throws Exception {
         ZooKeeper zk = null;
         try {
@@ -199,7 +199,7 @@ public void testACLs() throws Exception {
         }
     }

-    @Test
+    // @Test
     public void testNullAuthId() throws Exception {
         ZooKeeper zk = null;
         try {
@@ -262,7 +262,7 @@ public void process(WatchedEvent event) {
      * Register multiple watchers and verify that they all get notified and
      * in the right order.
      */
-    @Test
+    // @Test
     public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {
         ZooKeeper zk = createClient(new CountdownWatcher(), hostPort);
         try {
@@ -510,6 +510,9 @@ public void testSequentialNodeNames() throws IOException, InterruptedException,
             assertEquals(1, children.size());
             assertEquals(file + "0000000000", children.get(0));

+            if (true)
+                return;
+
             zk.create(filepath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);
             children = zk.getChildren(path, false);
             assertEquals(2, children.size());
@@ -538,7 +541,7 @@ public void testSequentialNodeNames() throws IOException, InterruptedException,

     // Test that data provided when
     // creating sequential nodes is stored properly
-    @Test
+    // @Test
     public void testSequentialNodeData() throws Exception {
         ZooKeeper zk = null;
         String queue_handle = "/queue";
@@ -572,7 +575,7 @@ public void testSequentialNodeData() throws Exception {

     }

-    @Test
+    // @Test
     public void testLargeNodeData() throws Exception {
         ZooKeeper zk = null;
         String queue_handle = "/large";
@@ -599,7 +602,7 @@ private void verifyCreateFails(String path, ZooKeeper zk) throws Exception {
     }

     // Test that the path string is validated
-    @Test
+    // @Test
     public void testPathValidation() throws Exception {
         ZooKeeper zk = createClient();

@@ -683,7 +686,7 @@ public void testPathValidation() throws Exception {
         zk.create("/f/f./f", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
     }

-    @Test
+    // @Test
     public void testDeleteWithChildren() throws Exception {
         ZooKeeper zk = createClient();
         zk.create("/parent", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
@@ -732,7 +735,7 @@ public void run() {
      *
      * @throws Throwable
      */
-    @Test
+    // @Test
     public void testClientCleanup() throws Throwable {
         OSMXBean osMbean = new OSMXBean();
         if (!osMbean.getUnix()) {
@@ -779,7 +782,7 @@ public void testClientCleanup() throws Throwable {
      * We create a perfectly valid 'exists' request, except that the opcode is wrong.
      * @throws Exception
      */
-    @Test
+    // @Test
     public void testNonExistingOpCode() throws Exception {
         final CountDownLatch clientDisconnected = new CountDownLatch(1);
         Watcher watcher = new Watcher() {
@@ -810,7 +813,7 @@ public synchronized void process(WatchedEvent event) {
         zk.close();
     }

-    @Test
+    // @Test
     public void testTryWithResources() throws Exception {
         ZooKeeper zooKeeper;
         try (ZooKeeper zk = createClient()) {
@@ -821,7 +824,7 @@ public void testTryWithResources() throws Exception {
         assertFalse(zooKeeper.getState().isAlive());
     }

-    @Test
+    // @Test
     public void testCXidRollover() throws Exception {
         TestableZooKeeper zk = null;
         try {
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/test/ReadOnlyModeTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/test/ReadOnlyModeTest.java
index 0bef4c14a..1e8ce2b64 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/test/ReadOnlyModeTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/test/ReadOnlyModeTest.java
@@ -156,7 +156,7 @@ public void testReadOnlyClient() throws Exception {
      * Ensures that upon connection to a read-only server client receives
      * ConnectedReadOnly state notification.
      */
-    @Test(timeout = 90000)
+    // @Test(timeout = 90000)
     public void testConnectionEvents() throws Exception {
         CountdownWatcher watcher = new CountdownWatcher();
         ZooKeeper zk = new ZooKeeper(qu.getConnString(), CONNECTION_TIMEOUT, watcher, true);
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java
index 9a5376b63..9e599db54 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java
@@ -331,6 +331,45 @@ public void testSessionTimeoutAccess() throws Exception {
         LOG.info(zk.toString());
     }

+    /**
+     * original test added in
+     * https://github.com/OrderLab/zookeeper/commit/b37b8d6713c630901e46f0191b205061c0273133
+     * minor change on args since interface changed
+     */
+    @Test
+    public void testSessionTimeoutZK450() throws Exception {
+        final int TIMEOUT = 5000;
+        DisconnectableZooKeeper zk = createClient(TIMEOUT);
+        zk.create("/stest2", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
+        zk.disconnect();
+        Thread.sleep(TIMEOUT * 2);
+        zk = createClient(TIMEOUT);
+        zk.create("/stest2", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
+        tearDown();
+        zk.close();
+        zk.disconnect();
+        setUp();
+        zk = createClient(TIMEOUT);
+        assertTrue(zk.exists("/stest2", false) != null);
+        Thread.sleep(TIMEOUT * 2);
+        assertTrue(zk.exists("/stest2", false) == null);
+        zk.close();
+    }
+
+    /**
+     * a simple version we truncate
+     */
+    @Test
+    public void testSessionTimeoutSimple() throws Exception {
+        final int TIMEOUT = 5000;
+        DisconnectableZooKeeper zk = createClient(TIMEOUT);
+        zk.create("/stestaa", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
+        assertTrue(zk.exists("/stestaa", false) != null);
+        Thread.sleep(TIMEOUT * 2);
+        // Assert.assertTrue(zk.exists("/stestaa", false) == null);
+        zk.close();
+    }
+
     private class DupWatcher extends CountdownWatcher {
 
         public List<WatchedEvent> states = new LinkedList<WatchedEvent>();
